#!/usr/bin/env bash
#
#  Copyright 2020 WoozyMasta <woozymasta@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# shellcheck disable=SC2015

set -e

# resource types to ignore completely.
declare -A ignored_resources=(
	# pods and metrics;
	[pods]=1
	[pods.metrics.k8s.io]=1
	# leases
	[leases.coordination.k8s.io]=1
	# endpoints, slices, and cilium endpoint stuff
	[endpoints]=1
	[endpointslices.discovery.k8s.io]=1
	[ciliumendpoints.cilium.io]=1
	# node metrics
	[nodes.metrics.k8s.io]=1
	# cilium identities
	[ciliumidentities.cilium.io]=1
)

# Messages
log() {
	printf '%s [%s] %s\n' "$(date '+%Y/%m/%d %H:%M:%S')" "$1" "${@:2}"
}
msg-start() {
	[ "$silent" == 'true' ] && return
	if [ -t 1 ]; then
		printf '\e[1;33m%-15s\e[m%-30s %s\n' 'Processing' "$1" "${@:2}"
	else log INFO "Processing dump $*"; fi
}
msg-end() {
	[ "$silent" == 'true' ] && return
	if [ -t 1 ]; then
		printf '\e[1A\e[1;32m%-15s\e[m%-30s %s\n' 'Success' "$1" "${@:2}"
	else log INFO "Successfully dumped $*"; fi
}
msg-fail() {
	[ "$silent" == 'true' ] && return
	if [ -t 1 ]; then
		printf '\e[1A\e[1;31m%-15s\e[m%-30s %s\n' 'Fail' "$1" "${@:2}"
	else log WARNING "Failed dump $*"; fi
}
success() {
	[ "$silent" == 'true' ] && return
	if [ -t 1 ]; then
		printf '%s \e[1;36m%s\e[m %s\n' "$1" "$2" "${@:3}"
	else log INFO "$*"; fi
	score=$((score + 1))
}
heading() {
	[ "$silent" == 'true' ] && return
	if [ -t 1 ]; then
		printf '%s \e[1;34m%s\e[m %s\n%-15s%-30s %s\n' \
			"$1" "$2" 'started' 'STATE' 'RESOURCE' 'NAME'
	else log INFO "$*"; fi
}
warn() {
	if [ -t 1 ]; then
		printf >&2 '\e[1;31m%-10s\e[m%s\n' 'Warning:' "$*"
	else log WARNING "$*"; fi
}
fail() {
	if [ -t 1 ]; then
		printf >&2 '\n\e[1;31m%-10s\e[m%s\n' 'Error:' "$*"
		exit 1
	else
		log ERROR "$*"
		exit 1
	fi
}

# Check command is exist
require() {
	for command in "$@"; do
		if ! [ -x "$(command -v "$command")" ]; then
			fail "'$command' util not found, please install it first"
		fi
	done
}

# Usage message
usage() {
	cat <<- EOF
		Dump kubernetes cluster resources

		Usage:
		  ${0##*/} [command] [[flags]]

		Available Commands:
		  all, dump                     Dump all kubernetes resources
		  ns,  dump-namespaces          Dump namespaced kubernetes resources
		  cls, dump-cluster             Dump cluster wide kubernetes resources

		The command can also be passed through the environment variable MODE.
		All flags presented below have a similar variable in uppercase, with underscores
		For example:
		  --dump-dir == DUMP_DIR

		Flags:
		  -h, --help                    This help
		  -s, --silent                  Execute silently, suppress all stdout messages
		  -d, --dump-dir                Path to dir to store dumps, default ./dump
		  -o, --output-dir              Path to dir to store output tarballs, default ./output

		Kubernetes flags:
		  -n, --namespaces              List of kubernetes namespaces
		  -r, --namespaced-resources    List of namespaced resources
		  -k, --cluster-resources       List of cluster resources
		      --kube-config             Path to kubeconfig file
		      --kube-context            The name of the kubeconfig context to use
		      --kube-cluster            The name of the kubeconfig cluster to use
		      --kube-insecure-tls       Skip check server's certificate for validity

		Archive flags:
		      --archive-rotate-days     Rotate archives older than N days

		Example of use:
		  ${0##*/} dump-namespaces -n default,dev -d /mnt/dump -s

		Report bugs at:
		  https://github.com/WoozyMasta/kube-dump/issues
		  <woozymasta@gmail.com>

	EOF
	exit 0
}

# Set common vars
working_dir="$(pwd)"
timestamp="$(date '+%Y.%m.%d_%H-%M')"

# Parse args commands
if [[ "${1:-$MODE}" =~ ^(dump|all|dump-namespaces|ns|dump-cluster|cls)$ ]]; then
	mode="${1:-$MODE}"
else usage; fi

# Parse args flags
args=$(
	getopt \
		-l "namespaces:,namespaced-resources:,cluster-resources:" \
		-l "kube-config:,kube-context:,kube-cluster:,kube-insecure-tls" \
		-l "help,silent,destination:,output:" \
		-l "archive-rotate-days:" \
		-o "n:,r:,k:,h,s,d:,o:" -- "${@:2}"
)
eval set -- "$args"
while [ $# -ge 1 ]; do
	case "$1" in
		# Resources
		-n | --namespaces)
			namespaces+="$2,"
			shift
			shift
			;;
		-r | --namespaced-resources)
			namespaced_resources+="$2,"
			shift
			shift
			;;
		-k | --cluster-resources)
			cluster_resources+="$2,"
			shift
			shift
			;;
			# Kubectl opts
		--kube-config)
			kube_config="$2"
			shift
			shift
			;;
		--kube-context)
			kube_context="$2"
			shift
			shift
			;;
		--kube-cluster)
			kube_cluster="$2"
			shift
			shift
			;;
		--kube-insecure-tls)
			kube_insecure_tls='true'
			shift
			;;
			# Common opts
		-h | --help) usage ;;
		-s | --silent)
			silent='true'
			shift
			;;
		-d | --dump-dir)
			dump_dir="$2"
			shift
			shift
			;;
		-o | --output-dir)
			output_dir="$2"
			shift
			shift
			;;
			# Archive opts
		--archive-rotate-days)
			archive_rotate="$2"
			shift
			shift
			;;
			# Final
		--)
			shift
			break
			;;
		-*) fail "invalid option $1" ;;
	esac
done

if [[ -n "$*" && "$OSTYPE" != "darwin"* ]]; then
	fail "extra arguments $*"
fi

# Set vars
: "${silent:=$SILENT}"
: "${kube_config:=$KUBE_CONFIG}"
: "${kube_context:=$KUBE_CONTEXT}"
: "${kube_cluster:=$KUBE_CLUSTER}"
: "${kube_insecure_tls:=$KUBE_INSECURE_TLS}"
: "${archive_rotate:=$ARCHIVE_ROTATE}"

# Check dependency
require kubectl jq tar gzip

# 'age' recipents
declare -a age_recipients=()
# check for AGE_RECIPIENT_1, AGE_RECIPIENT_2, etc up to AGE_RECIPIENT_9; add to array if environment var set.
for i in $(seq 1 9); do
	age_recipient_var="AGE_RECIPIENT_${i}"
	if [ -n "${!age_recipient_var}" ]; then
		success "Found age encryption recipient: ${age_recipient_var}" "${!age_recipient_var}"
		age_recipients+=("--recipient" "${!age_recipient_var}")
	fi
done

# if more than zero elements in age_recipients array, require age command
if [ ${#age_recipients[@]} -gt 0 ]; then
	require age
else
	success "No age encryption recipients found, tarball will be unencrypted."
fi

# Kubectl args
[ -n "$kube_config" ] && k_args+=("--kubeconfig=$kube_config")
[ -n "$kube_context" ] && k_args+=("--context=$kube_context")
[ -n "$kube_cluster" ] && k_args+=("--cluster=$kube_cluster")
[ "$kube_insecure_tls" == 'true' ] &&
	k_args+=("--insecure-skip-tls-verify=true")

# Use serviceaccount
if [ -n "$KUBERNETES_SERVICE_HOST" ] &&
	[ -n "$KUBERNETES_SERVICE_PORT" ] &&
	[ -z "$kube_config" ]; then

	require curl
	kube_api="$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT"
	kube_api_token=$(< /var/run/secrets/kubernetes.io/serviceaccount/token)
	kube_api_ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

	_api_code=$(
		curl --fail --location --output /dev/null --write-out '%{http_code}\n' --cacert $kube_api_ca \
			-H "Authorization: Bearer $kube_api_token" --silent "https://$kube_api/livez"
	)
	if [ "$_api_code" == "200" ]; then
		kubectl config set-cluster "${kube_context:-k8s}" \
			--server="https://$kube_api" \
			--certificate-authority="$kube_api_ca" > /dev/null
		kubectl config set-credentials "${kube_user:-kube-dump}" \
			--token="$kube_api_token" > /dev/null
		kubectl config set-context "${kube_context:-k8s}" \
			--cluster "${kube_cluster:-k8s}" \
			--user "${kube_user:-kube-dump}" > /dev/null
		kubectl config use-context "${kube_context:-k8s}" > /dev/null

	else
		fail 'Found running on kubernetes cluster but attempting connect' \
			"to API $kube_api failed with code $_api_code"

	fi
fi

# Check kube config context
if [ -n "$kube_context" ]; then
	kubectl config view \
		--kubeconfig="${kube_config:-$HOME/.kube/config}" --output='json' |
		jq --exit-status --monochrome-output --raw-output '.contexts[].name' |
		grep --quiet "^$kube_context$" &&
		context="$kube_context" ||
		fail "Context $kube_context not exist in kubeconfig"
elif kubectl config current-context "${k_args[@]}" > /dev/null 2>&1; then
	context=$(kubectl config current-context "${k_args[@]}")
else
	fail "Current context not configured in kubeconfig"
fi

# Check kube config cluster
if [ -n "$kube_cluster" ]; then
	kubectl config view \
		--kubeconfig="${kube_config:-$HOME/.kube/config}" --output='json' |
		jq --exit-status --monochrome-output --raw-output '.clusters[].name' |
		grep --quiet "^$kube_cluster$" ||
		fail "Cluster $kube_cluster not exist in kubeconfig"
fi

# Try get cluster info
kubectl cluster-info "${k_args[@]}" > /dev/null ||
	fail "Cluster $kube_api not accessible"

# Set namespaces list
if [ -z "${namespaces:-$NAMESPACES}" ]; then
	if ! namespaces=$(kubectl get namespaces \
		--output=jsonpath=\{.items[*].metadata.name\} "${k_args[@]}"); then
		fail 'Cant get namespaces from cluster'
	fi
else
	namespaces=${namespaces:-$NAMESPACES}
fi

# Set namespaced resources
# https://kubernetes.io/docs/reference/kubectl/overview/#resource-types
if [ -z "${namespaced_resources:-$NAMESPACED_RESOURCES}" ]; then
	namespaced_resources="$(kubectl api-resources --namespaced=true --output=name "${k_args[@]}" | tr '\n' ' ')"
else
	namespaced_resources=${namespaced_resources:-$NAMESPACED_RESOURCES}
fi

# Set cluster resources
if [ -z "${cluster_resources:-$CLUSTER_RESOURCES}" ]; then
	cluster_resources="$(kubectl api-resources --namespaced=false --output=name "${k_args[@]}" | tr '\n' ' ')"
else
	cluster_resources=${cluster_resources:-$CLUSTER_RESOURCES}
fi

# Dump dir
dump_dir="${dump_dir:-${DUMP_DIR:-${working_dir}/dump}}"
dump_dir="$(realpath "$dump_dir" --canonicalize-missing)"
mkdir -p "$dump_dir"
success 'Dump data directory' "$dump_dir" 'created'

# Output dir
output_dir="${output_dir:-${OUTPUT_DIR:-${working_dir}/output}}"
output_dir="$(realpath "$output_dir" --canonicalize-missing)"
mkdir -p "$output_dir"
success 'Output data (tarballs) directory' "$output_dir" 'created'

success 'Dump data in' "$dump_dir" 'directory' ''
score=0

# Work with namespaced resources
if [[ "$mode" =~ ^(dump|all|dump-namespaces|ns)$ ]]; then

	for ns in ${namespaces//,/ }; do

		# Check namespace exist
		if ! kubectl get ns "$ns" "${k_args[@]}" > /dev/null 2>&1; then
			warn "Namespace \"$ns\" not found"
			continue
		fi

		heading 'Dump namespace' "$ns"

		# Iterate over resources
		for resource in ${namespaced_resources//,/ }; do

			# Skip ignored resources
			[ -n "${ignored_resources[$resource]}" ] && continue

			# Iterate over only accessible resources
			while read -r name; do
				[ -z "$name" ] && continue

				# Skip service-account-token secrets
				if [ "$resource" == 'secret' ]; then
					type=$(
						kubectl get --namespace="${ns}" --output=jsonpath="{.type}" \
							secret "$name" "${k_args[@]}"
					)
					[ "$type" == 'kubernetes.io/service-account-token' ] && continue
					unset type
				fi

				msg-start "$resource" "$name"

				# create resource dir
				destination_resource_dir="$dump_dir/$ns/$resource"
				[ -d "$destination_resource_dir" ] || mkdir -p "$destination_resource_dir"

				destination_resource_name="${name//:/-}.yaml"

				# Save resource to file
				kubectl --namespace="${ns}" get --output='yaml' "$resource" "$name" "${k_args[@]}" \
					> "$destination_resource_dir/$destination_resource_name" 2> /dev/null &&
					msg-end "$resource" "$name" || msg-fail "$resource" "$name"

			done < <(
				kubectl --namespace="${ns}" get "$resource" \
					--output='custom-columns=NAME:.metadata.name' \
					--no-headers "${k_args[@]}" 2> /dev/null
			)
			# Finished with resource
		done
		success 'Namespace' "$ns" 'resources dump completed' ''
	done
fi

# Work with cluster resources
if [[ "$mode" =~ ^(dump|all|dump-cluster|cls)$ ]]; then

	heading 'Dump cluster data' "$context"

	# Iterate over resources
	for resource in ${cluster_resources//,/ }; do

		# Skip ignored resources
		[ -n "${ignored_resources[$resource]}" ] && continue

		# Iterate over only accessible resources
		while read -r name; do
			msg-start "$resource" "$name"

			# create resource dir
			destination_resource_dir="$dump_dir/cluster/$resource"
			[ -d "$destination_resource_dir" ] || mkdir -p "$destination_resource_dir"

			destination_resource_name="${name//:/-}.yaml"

			# Save resource to file
			kubectl get --output='yaml' "$resource" "$name" "${k_args[@]}" \
				> "$destination_resource_dir/$destination_resource_name" 2> /dev/null &&
				msg-end "$resource" "$name" || msg-fail "$resource" "$name"

		done < <(
			kubectl get "$resource" \
				--output='custom-columns=NAME:.metadata.name' \
				--no-headers "${k_args[@]}" 2> /dev/null
		)
		# Finished with resource
	done

	success 'Cluster' "$context" 'resources dump completed' ''
fi

# Create temporary directory to store tarball
tmp_dir=$(mktemp -d)

# Archive
_archive="${tmp_dir}/k8s_yamls_$timestamp.tar.gz"

# Create tar.gz of the contents of the dump directory
tar -czf "$_archive" -C "$dump_dir" .
success 'Archive' "$_archive" 'created'

# Use age if recipients are set, otherwise just move the tarball to output
if [ ${#age_recipients[@]} -gt 0 ]; then
	# Use "age" to encrypt the tarball
	_archive_encrypted="${output_dir}/k8s_yamls_$timestamp.tar.gz.age"
	age --encrypt --armor "${age_recipients[@]}" --output "$_archive_encrypted" "$_archive"
	success 'Encrypted archive' "$_archive_encrypted" 'created'
else
	# Move the tarball to the output directory
	_archive_unencrypted="${output_dir}/k8s_yamls_$timestamp.tar.gz"
	mv "$_archive" "$_archive_unencrypted"
	success 'Moved archive' "$_archive_unencrypted" 'to output directory'
fi

# Rotate archives
if [ -n "$archive_rotate" ]; then
	find "${dump_dir}" -mindepth 1 -maxdepth 1 -type f -name "*.tar.gz" -o -name "*.tar.gz.age" -mtime +"$archive_rotate" -delete
	success 'Rotation for older than' "$archive_rotate days" "archives removed"
fi

# Done
if [ "$score" -ge 0 ]; then
	success 'Done!' "$score" 'task completed'
	exit 0
else
	fail 'No task has been completed'
fi
